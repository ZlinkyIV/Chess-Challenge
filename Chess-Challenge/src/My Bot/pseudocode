using System;
using System.Linq;
using ChessChallenge.API;

(Move move, int score) SearchWrapper(Board board, int depth)
    {
        return board.GetLegalMoves()
            .Select(move => (move, score: MakeMove(board, move, board => -Search(board, depth - 1))))
            .MaxBy(moveScore => moveScore.score);
    }

int Search(Board board, int depth, int whiteBest = int.MinValue + 1, int blackBest = int.MaxValue, bool quiescence = false)
{
    if (depth == 0 && !quiescence)
        return Search(board, depth, whiteBest, blackBest, true);

    if (quiescence)
    {
        int standPat = Evaluate(board);

        if (standPat >= blackBest)
            return blackBest;
        if (whiteBest < standPat)
            whiteBest = standPat;
    }

    Move[] legalMoves = board.GetLegalMoves();
    
    if (legalMoves.Length == 0)
            return board.IsInCheckmate()
                ? int.MinValue + 1
                : 0;

    foreach (var move in board.GetLegalMoves())
    {
        int score = MakeMove(board, move, (board) => -Search(board, depth - 1, -blackBest, -whiteBest, quiescence));

        if (score > blackBest)
            return blackBest;
        if (score > whiteBest)
            whiteBest = score;
    }
    return whiteBest;
}

int Evaluate(Board board)
{
    return 0;
}


TResult MakeMove<TResult>(Board board, Move move, Func<Board, TResult> evaluate)
{
    board.MakeMove(move);
    TResult evaluation = evaluate(board);
    board.UndoMove(move);
    return evaluation;
}

struct MoveScore
{
    public Move move;
    public int score;

    public MoveScore(Move move, int score)
    {
        this.move = move;
        this.score = score;
    }

    public static MoveScore operator -(MoveScore moveScore) => new(moveScore.move, -moveScore.score);
}